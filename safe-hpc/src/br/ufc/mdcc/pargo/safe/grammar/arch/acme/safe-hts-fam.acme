Family safe-hts-fam = {

	/*Basic elements. All the others extends them.*/
	Component Type SAFeComponent = {
		 
	};
	Connector Type SAFeConnector = {
		 
	};
	Role Type SAFeRole = {};
	Port Type SAFePort = {};
	
	/*Roles Uses and Provides*/
	Role Type SAFeRoleUses extends SAFeRole with {
		rule onlyProvidesPortAttacheds = invariant forall a in self.ATTACHEDPORTS 
		| declaresType(a,SAFeEnvironmentPortProvides) OR
		  declaresType(a,SAFeWorkflowPortProvides);
	};
	Role Type SAFeRoleProvides extends SAFeRole with {
		rule onlyUsesPortAttacheds = invariant forall a in self.ATTACHEDPORTS 
		| declaresType(a,SAFeEnvironmentPortUses) OR
		  declaresType(a,SAFeWorkflowPortUses) ;
	};
	
	/*Environment Ports*/
	Port Type SAFeEnvironmentPortUses extends SAFePort with {
		rule onlyProvidesRoleAttacheds = invariant forall a in self.ATTACHEDROLES
		 | declaresType(a,SAFeRoleProvides);
	};
	Port Type SAFeEnvironmentPortProvides extends SAFePort with {
		rule onlyUsesRoleAttacheds = invariant forall a in self.ATTACHEDROLES
		 | declaresType(a,SAFeRoleUses);
	};
	
	/*Partner Ports*/
	Port Type SAFeWorkflowPortUses extends SAFePort with {
		rule onlyProvidesRoleAttacheds = invariant forall a in self.ATTACHEDROLES
		 | declaresType(a,SAFeRoleProvides);
	};
	Port Type SAFeWorkflowPortProvides extends SAFePort with {
		rule onlyUsesRoleAttacheds = invariant forall a in self.ATTACHEDROLES
		 | declaresType(a,SAFeRoleUses);
	};
	 
	/*WORKFLOW */
	Component Type SAFeWorkflow extends SAFeComponent with {
		rule onlyUsesPort = invariant forall a in self.PORTS 
			| declaresType(a,SAFeWorkflowPortUses) OR
			  declaresType(a,SAFeWorkflowPortProvides) OR
			  declaresType(a,SAFeEnvironmentPortUses) OR
			  declaresType(a,SAFeEnvironmentPortProvides);
	};	

	/*APPLICATION*/
	Component Type SAFeApplication extends SAFeComponent with {
		rule onlyUsesPort = invariant forall a in self.PORTS 
			| declaresType(a,SAFeWorkflowPortUses) OR
			  declaresType(a,SAFeWorkflowPortProvides) OR
			  declaresType(a,SAFeEnvironmentPortUses) OR
			  declaresType(a,SAFeEnvironmentPortProvides);
	};
	
	/*REPOSITORY*/
	Component Type SAFeRepository extends SAFeComponent with {
		
	}

	/*PLATFORM*/
	Component Type SAFePlatform extends SAFeComponent with {
		
	}
	/*QUALIFICATOR*/
	Component Type SAFeConector extends SAFeComponent with {
		
	}

	/*COMPUTATION*/	
	Component Type SAFeComputation extends SAFeComponent with {
		
	};
	
	/*CONNECTOR*/
	Connector Type SAFeEnvironmentBiding extends SAFeConnector with{
		rule onlyUsesProvides = invariant forall a in self.ROLES 
		| declaresType(a,SAFeRoleUses) OR
		  declaresType(a,SAFeRoleProvides);
	};

	Connector Type SAFeWorkflowBiding extends SAFeConnector with{
		rule onlyUsesProvides = invariant forall a in self.ROLES 
		| declaresType(a,SAFeRoleUses) OR
		  declaresType(a,SAFeRoleProvides);
	};
	
	

	/*SYSTEM RULES*/
	rule mustHaveOnlyOneApplication = invariant size({select app in self.COMPONENTS | declaresType(app,SAFeApplication)})==1;
	rule mustHaveOnlyOneWorkflow = invariant size({select app in self.COMPONENTS | declaresType(app,SAFeWorkflow)})==1;
}
